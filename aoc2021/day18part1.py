lines = [    "[[8,8],5]",
"[[[[9,0],1],4],[[3,6],[0,5]]]",
"[[9,[0,[4,5]]],[1,[[6,8],4]]]",
"[[8,7],[[[8,5],[2,0]],[[6,3],[5,0]]]]",
"[[[1,8],2],[[[9,1],[2,0]],[1,[9,4]]]]",
"[[[6,[8,8]],[6,4]],[[8,2],[[0,8],9]]]",
"[[[6,3],[9,[9,1]]],[[0,0],1]]",
"[[[[2,7],[8,2]],[[9,6],[5,1]]],[[[7,6],[6,0]],[4,2]]]",
"[[[8,[9,1]],[9,3]],[[[5,4],[8,0]],[[3,5],[9,5]]]]",
"[[[3,[4,9]],2],[[7,9],7]]",
"[[[7,[9,0]],5],[[[3,4],[2,6]],[[3,5],[7,2]]]]",
"[[8,[8,9]],[[[3,2],[6,2]],4]]",
"[[[[8,0],3],[3,8]],[[[5,0],[7,3]],[5,[3,0]]]]",
"[4,[[3,[0,9]],[[5,0],[2,0]]]]",
"[[[[0,1],5],[3,[9,6]]],[[[4,4],5],[[3,8],[5,1]]]]",
"[[[[4,8],8],0],[5,[[1,7],[4,3]]]]",
"[[3,[[1,1],[5,6]]],[7,[[4,0],[0,7]]]]",
"[9,[4,[[1,3],2]]]",
"[[[1,[2,7]],[[4,7],3]],[2,1]]",
"[[[9,5],[2,5]],[[[8,9],[4,5]],2]]",
"[[2,[[7,4],6]],[[1,[0,7]],[[4,8],8]]]",
"[[[[0,5],3],[7,0]],9]",
"[[[[1,4],[4,3]],7],[[9,4],[6,[8,6]]]]",
"[[[7,2],[[3,3],1]],[5,9]]",
"[[[9,[6,2]],2],[[6,5],6]]",
"[[5,[3,2]],[[[2,4],[1,5]],[6,3]]]",
"[6,3]",
"[[9,6],[[[8,2],[5,6]],[[3,5],[3,3]]]]",
"[[[[2,5],7],4],[8,3]]",
"[[[[6,1],9],[0,6]],[6,2]]",
"[[[[8,4],2],[[0,1],[5,8]]],9]",
"[[[7,0],[4,9]],[[[9,9],[4,4]],[6,6]]]",
"[[[9,8],[2,0]],[[9,[6,2]],[6,[5,6]]]]",
"[[[9,8],[[0,6],[3,5]]],[[[4,7],[7,5]],[7,[8,5]]]]",
"[[[[9,0],[1,6]],[2,[5,3]]],[[[2,0],[0,3]],[[9,1],[7,7]]]]",
"[[[5,[2,2]],[2,[1,0]]],[1,1]]",
"[[[9,[7,2]],[[2,7],1]],[[5,7],[[8,7],7]]]",
"[[[9,[9,4]],[[0,8],2]],[0,[[2,2],[4,1]]]]",
"[[[5,5],[9,[2,0]]],[[[9,0],6],1]]",
"[[[1,9],[[9,5],[5,6]]],[6,[5,[9,4]]]]",
"[[[[8,6],9],9],[[7,2],[7,[2,6]]]]",
"[[[[6,4],7],7],[[2,[9,7]],7]]",
"[[7,[[5,6],9]],[[[9,8],8],[[8,9],[1,0]]]]",
"[[[0,[7,6]],0],[[[2,5],1],9]]",
"[[[3,[4,1]],[4,2]],[0,[[6,0],[1,6]]]]",
"[[9,[0,0]],[[[3,0],[9,9]],[1,[1,5]]]]",
"[[[[9,9],1],6],[5,6]]",
"[3,4]",
"[[[[5,4],9],6],2]",
"[[5,4],[[6,[7,4]],[[0,3],0]]]",
"[[[3,[9,6]],4],[[[9,8],6],3]]",
"[[5,[1,[5,5]]],[[[3,8],[0,1]],[[9,3],[6,2]]]]",
"[[4,[0,3]],1]",
"[[[7,[2,9]],[[5,8],2]],[[[4,4],[2,0]],8]]",
"[[[[4,0],0],8],7]",
"[[[[3,0],0],[[6,0],3]],[[[1,5],1],[3,[0,0]]]]",
"[[[[8,1],5],0],[[[3,9],[8,3]],[[6,9],[5,1]]]]",
"[[7,7],[[[8,5],2],[9,2]]]",
"[[[[4,9],9],[6,[5,3]]],[[[7,1],[7,1]],[[9,5],[7,0]]]]",
"[[7,[0,5]],[7,[2,[1,6]]]]",
"[[9,[0,[0,2]]],[[1,1],[[6,6],[5,3]]]]",
"[[[2,9],[[6,9],9]],[[[4,2],7],[1,[2,3]]]]",
"[[[0,1],[3,3]],[3,[[2,7],2]]]",
"[[[5,6],8],[[[4,9],[3,3]],[6,[5,2]]]]",
"[[4,[4,[2,5]]],[[2,[4,8]],[3,[7,7]]]]",
"[[2,5],[[[9,6],[9,3]],[[4,5],[2,3]]]]",
"[[5,[0,5]],[[[2,1],[0,5]],3]]",
"[[[[2,0],5],[[7,9],[4,5]]],[0,[[1,4],9]]]",
"[[[[1,3],2],[[3,9],[9,5]]],[[[4,1],[3,8]],0]]",
"[[[[1,8],[8,3]],[3,0]],[[5,1],[4,8]]]",
"[[1,6],[3,2]]",
"[[4,5],[[[9,3],[8,6]],[2,[8,6]]]]",
"[[[[4,4],1],[[7,3],2]],[[9,[2,1]],[8,2]]]",
"[0,[[2,[3,8]],9]]",
"[[1,[5,0]],[0,[[2,6],[8,5]]]]",
"[[6,[6,1]],[[2,[7,9]],[[8,3],1]]]",
"[[[2,[5,9]],[[8,9],1]],[[[5,2],2],4]]",
"[[[4,3],5],[[6,[3,6]],5]]",
"[1,[6,[6,2]]]",
"[[[[4,9],3],9],[[3,9],[8,[4,9]]]]",
"[[[[7,1],[1,6]],[[7,8],[3,7]]],[[[5,3],7],[9,[3,1]]]]",
"[[[[0,8],[8,9]],2],7]",
"[[[[3,7],[9,8]],[[7,1],8]],[[4,[4,6]],8]]",
"[3,[3,[[4,4],5]]]",
"[[3,[[2,3],7]],[[7,9],2]]",
"[[[[0,6],[5,1]],[[7,2],5]],[9,8]]",
"[[4,0],[[4,3],[7,2]]]",
"[[[8,[1,1]],[7,[9,1]]],[9,[9,[0,8]]]]",
"[9,[[[4,5],8],[[3,4],9]]]",
"[[[6,[4,7]],[8,7]],[[[3,8],5],[[2,1],[3,5]]]]",
"[[[[5,5],[6,8]],[[2,3],6]],[8,[5,7]]]",
"[[5,[[6,1],[3,6]]],[[[0,6],[7,1]],[9,[8,4]]]]",
"[[[[0,1],[4,9]],[[1,7],[3,3]]],[6,[3,[6,1]]]]",
"[[[[3,8],5],[[4,7],2]],2]",
"[[6,[[4,4],0]],[[2,[4,5]],[8,2]]]",
"[[6,[9,[7,0]]],[[9,[1,6]],[[6,1],1]]]",
"[[[[2,1],[5,7]],[5,[9,3]]],[[[7,9],[4,2]],4]]",
"[[3,1],[[7,8],[[8,8],9]]]",
"[[[[9,4],[1,8]],[9,[3,7]]],[[6,9],[[7,2],1]]]",
"[[[9,3],2],9]",
]

class Num:
    def __init__(self, val):
        self.val = val
        self.leftn = None
        self.rightn = None
        self.leftmost = self
        self.rightmost = self
        self.parent = None
    def update_n(self):
        pass
    def __repr__(self):
        return str(self.val)

class Pair:
    def __init__(self, left, right):
        self.parent = None
        self.side = None
        self.left = left
        self.right = right
        self.leftmost = left.leftmost
        self.rightmost = right.rightmost
        self.setleft(left)
        self.setright(right)
    def setleft(self, left):
        self.left = left
        self.left.parent = self
        self.left.side = 0
        self.leftmost = self.left.leftmost
        self.left.rightmost.rightn = self.right.leftmost
    def setright(self, right):
        self.right = right
        self.right.parent = self
        self.right.side = 1
        self.rightmost = self.right.rightmost
        self.right.leftmost.leftn = self.left.rightmost
    def update_n(self):
        self.left.update_n()
        self.right.update_n()
        self.leftmost = self.left.leftmost
        self.rightmost = self.right.rightmost
        self.left.rightmost.rightn = self.right.leftmost
        self.right.leftmost.leftn = self.left.rightmost
    def __repr__(self):
        return f"[{self.left}, {self.right}]"

def convert(e):
    if isinstance(e, list):
        return Pair(convert(e[0]), convert(e[1]))
    else:
        return Num(e)

def test_explode(v, k, d = 0):
    if isinstance(k, Num):
        return
    if isinstance(k.left, Num) and isinstance(k.right, Num) and d >= 4:
        if k.left.leftn: k.left.leftn.val += k.left.val
        if k.right.rightn: k.right.rightn.val += k.right.val
        if k.side == 0:
            k.parent.setleft(Num(0))
        else:
            k.parent.setright(Num(0))
        v.update_n()
        return True
    return test_explode(v, k.left, d + 1) or test_explode(v, k.right, d + 1)

def test_split(v, k):
    if isinstance(k, Num):
        if k.val >= 10:
            if k.side == 0:
                k.parent.setleft(Pair(Num(k.val // 2), Num(-(-k.val // 2))))
            else:
                k.parent.setright(Pair(Num(k.val // 2), Num(-(-k.val // 2))))
            v.update_n()
            return True
        else:
            return False
    return test_split(v, k.left) or test_split(v, k.right)

def reduce(v):
    while True:
        if test_explode(v, v):
            pass
        elif test_split(v, v):
            pass
        else:
            break

def mag(v):
    if isinstance(v, Num):
        return v.val
    else:
        return 3 * mag(v.left) + 2 * mag(v.right)

d = []

for line in lines:
    if d == []:
        d = convert(eval(line))
    else:
        d = Pair(d, convert(eval(line)))
        reduce(d)

print(mag(d))